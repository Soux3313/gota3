/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/java_library_plugin.html
 */

plugins {
    id 'java-library'
    id 'java'
    id 'application'
}

jar {
    manifest {
        attributes(
                'Main-Class': 'gameserver.StartUp'
        )
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
 }
jar.dependsOn ":Model:build"
jar.dependsOn ":Validation:build"
jar.dependsOn ":HttpsUtil:build"

mainClassName = 'gameserver.StartUp'
sourceCompatibility = 11
targetCompatibility = 11
compileJava.options.encoding = 'UTF-8'

repositories {
    // Use jcenter for resolving dependencies.
    jcenter()
}

tasks.withType(JavaCompile) {
    // Keine Ahnung ob das hier reingehï¿½rt -Diana
    //enable compilation in a separate daemon process
    options.fork = true
}

sourceSets {
    intTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    intTestImplementation.extendsFrom implementation
    intTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:28.2-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'

    implementation 'org.apache.httpcomponents:httpclient:4.5.13'

    // ClI parser
    implementation group: 'commons-cli', name: 'commons-cli', version: '1.4'

    //Gson for JSON Support
    implementation 'com.google.code.gson:gson:2.8.6'

    implementation project(':Model')
    implementation project(':Validation')
    implementation project(':HttpsUtil')
}


test {
    //Runs when all tests are UP-TO-DATE (otherwise Gradle test wouldn't run)
    dependsOn 'cleanTest'

    useJUnit()

    // set heap size for the test JVM(s)
    maxHeapSize = '512m'

    //creates HTML reports for quick test result checking
    reports.html.enabled = true
}

task integrationTest(type: Test) {
    description = 'integrationTest running.'
    group = 'verification'

    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
    shouldRunAfter test
}

check.dependsOn integrationTest